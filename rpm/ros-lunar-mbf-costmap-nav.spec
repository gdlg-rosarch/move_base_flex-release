Name:           ros-lunar-mbf-costmap-nav
Version:        0.1.0
Release:        0%{?dist}
Summary:        ROS mbf_costmap_nav package

Group:          Development/Libraries
License:        3-Clause BSD
URL:            http://wiki.ros.org/move_base_flex
Source0:        %{name}-%{version}.tar.gz

Requires:       ros-lunar-actionlib
Requires:       ros-lunar-actionlib-msgs
Requires:       ros-lunar-base-local-planner
Requires:       ros-lunar-dynamic-reconfigure
Requires:       ros-lunar-geometry-msgs
Requires:       ros-lunar-mbf-abstract-nav
Requires:       ros-lunar-mbf-costmap-core
Requires:       ros-lunar-mbf-msgs
Requires:       ros-lunar-mbf-utility
Requires:       ros-lunar-move-base
Requires:       ros-lunar-move-base-msgs
Requires:       ros-lunar-nav-core
Requires:       ros-lunar-nav-msgs
Requires:       ros-lunar-pluginlib
Requires:       ros-lunar-roscpp
Requires:       ros-lunar-std-msgs
Requires:       ros-lunar-std-srvs
Requires:       ros-lunar-tf
BuildRequires:  ros-lunar-actionlib
BuildRequires:  ros-lunar-actionlib-msgs
BuildRequires:  ros-lunar-base-local-planner
BuildRequires:  ros-lunar-catkin
BuildRequires:  ros-lunar-dynamic-reconfigure
BuildRequires:  ros-lunar-geometry-msgs
BuildRequires:  ros-lunar-mbf-abstract-nav
BuildRequires:  ros-lunar-mbf-costmap-core
BuildRequires:  ros-lunar-mbf-msgs
BuildRequires:  ros-lunar-mbf-utility
BuildRequires:  ros-lunar-nav-core
BuildRequires:  ros-lunar-nav-msgs
BuildRequires:  ros-lunar-pluginlib
BuildRequires:  ros-lunar-roscpp
BuildRequires:  ros-lunar-std-msgs
BuildRequires:  ros-lunar-std-srvs
BuildRequires:  ros-lunar-tf

%description
The mbf_costmap_nav package contains the costmap navigation server
implementation of Move Base Flex (MBF). The costmap navigation server is bound
to the costmap_2d representation. It provides the Actions for planning,
controlling and recovering. At the time of start MBF loads all defined plugins.
Therefor, it loads all plugins which are defined in the lists *planners*,
*controllers* and *recovery_behaviors*. Each list holds a pair of a *name* and a
*type*. The *type* defines which kind of plugin to load. The *name* defines
under which name the plugin should be callable by the actions. Additionally the
mbf_costmap_nav package comes with a wrapper for the old navigation stack and
the plugins which inherits from the nav_core base classes. Preferably it tries
to load plugins for the new API. However, plugins could even support both
move_base and move_base_flex by inheriting both base class interfaces located in
the nav_core package and in the mbf_costmap_core package.

%prep
%setup -q

%build
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree that was dropped by catkin, and source it.  It will
# set things like CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/lunar/setup.sh" ]; then . "/opt/ros/lunar/setup.sh"; fi
mkdir -p obj-%{_target_platform} && cd obj-%{_target_platform}
%cmake .. \
        -UINCLUDE_INSTALL_DIR \
        -ULIB_INSTALL_DIR \
        -USYSCONF_INSTALL_DIR \
        -USHARE_INSTALL_PREFIX \
        -ULIB_SUFFIX \
        -DCMAKE_INSTALL_LIBDIR="lib" \
        -DCMAKE_INSTALL_PREFIX="/opt/ros/lunar" \
        -DCMAKE_PREFIX_PATH="/opt/ros/lunar" \
        -DSETUPTOOLS_DEB_LAYOUT=OFF \
        -DCATKIN_BUILD_BINARY_PACKAGE="1" \

make %{?_smp_mflags}

%install
# In case we're installing to a non-standard location, look for a setup.sh
# in the install tree that was dropped by catkin, and source it.  It will
# set things like CMAKE_PREFIX_PATH, PKG_CONFIG_PATH, and PYTHONPATH.
if [ -f "/opt/ros/lunar/setup.sh" ]; then . "/opt/ros/lunar/setup.sh"; fi
cd obj-%{_target_platform}
make %{?_smp_mflags} install DESTDIR=%{buildroot}

%files
/opt/ros/lunar

%changelog
* Thu Mar 22 2018 Sebastian PÃ¼tz <spuetz@uos.de> - 0.1.0-0
- Autogenerated by Bloom

